Use cWebHttpHandler.pkg
Use cCustomerDataDictionary.dd

//  Simple example of the cWebHttpHandler that implements a simple REST service. It shows how to 
//  handle different types of requests, query request details and generate a response.
//
//  GET http://localhost/WebOrder_20/SimpleREST/customers/
//  Gives a list of customers.
//  
//  GET http://localhost/WebOrder_20/SimpleREST/customers/4
//  Gives customer (4).
//  
//  POST http://localhost/WebOrder_20/SimpleREST/customers/
//  Creates a new customer.
//  
//  PATCH http://localhost/WebOrder_20/SimpleREST/customers/4
//  Updates the details of customer (4).
//  
//  DELETE http://localhost/WebOrder_20/SimpleREST/customers/4
//  Deletes customer (4).
//
//  The GET requests can be tested simply by pasting the URL in the browser. To test the other 
//  request types you can use the cJsonHttpTransfer class or a tool like Postman.

Object oDemoSimpleRestService is a cWebHttpHandler
    Object oCustomer_DD is a cCustomerDataDictionary
    End_Object

    Set Main_DD to oCustomer_DD
    
    //  The psPath property determines the path in the URL for which requests will be handled.
    Set psPath to "SimpleREST"
    //  Use psVerbs to filter based on the HTTP Verbs. 
    Set psVerbs to "GET,POST,PATCH,DELETE"
    //  We want WebApp Server errors to be returned as JSON when possible.
    Set peErrorType to httpErrorJson
    
    Procedure OnHttpGet String sPath String sAcceptType
        String[] aPath
        
        //  Split the path into parts
        Get StrSplitToArray sPath "/" to aPath
        If (SizeOfArray(aPath) < 2) Begin
            Send SetResponseStatus 404 "Invalid resource" 
            Procedure_Return
        End
        
        //  Redirect to a specific operation based on the path
        If (Lowercase(aPath[1]) = "customers") Begin
            If (SizeOfArray(aPath) > 2 and aPath[2] <> "") Begin
                Send Customer aPath[2]
            End
            Else Begin
                Send CustomerList
            End
        End
        Else Begin
            Send SetResponseStatus 404 "Unknown resource" 
        End
    End_Procedure
    
    //  Generate and output JSON for a single customer.
    Procedure Customer String sKey
        Handle hoJson
        
        Send Clear of oCustomer_DD
        Move sKey to Customer.Customer_Number
        Send Find of oCustomer_DD EQ 1
        
        If (Found) Begin
            Get Create (RefClass(cJsonObject)) to hoJson
            Send InitializeJsonType of hoJson jsonTypeObject
            
            Send SetMemberValue of hoJson "Number" jsonTypeInteger Customer.Customer_Number
            Send SetMemberValue of hoJson "Name" jsonTypeString (Trim(Customer.Name))
            Send SetMemberValue of hoJson "Address" jsonTypeString (Trim(Customer.Address))
            Send SetMemberValue of hoJson "City" jsonTypeString (Trim(Customer.City))
            Send SetMemberValue of hoJson "State" jsonTypeString (Trim(Customer.State))
            Send SetMemberValue of hoJson "Zip" jsonTypeString (Trim(Customer.Zip))
            Send SetMemberValue of hoJson "Phone" jsonTypeString (Trim(Customer.Phone_Number))
            Send SetMemberValue of hoJson "Email" jsonTypeString (Trim(Customer.EMail_Address))
            Send SetMemberValue of hoJson "CreditLimit" jsonTypeDouble Customer.Credit_Limit
            Send SetMemberValue of hoJson "Purchases" jsonTypeDouble Customer.Purchases
            Send SetMemberValue of hoJson "Balance" jsonTypeDouble Customer.Balance
            Send SetMemberValue of hoJson "Comments" jsonTypeString (Trim(Customer.Comments))
            Send SetMemberValue of hoJson "Status" jsonTypeBoolean (Customer.Status = "Y")
            
            
            Send OutputJson hoJson
            Send Destroy of hoJson
        End
        Else Begin
            Send SetResponseStatus 404 "Resource not found"
        End
    End_Procedure
    
    //  Generate and output JSON with a list of all customers
    Procedure CustomerList
        Handle hoJson
        Handle hoCustomer
        
        Get Create (RefClass(cJsonObject)) to hoJson
        Send InitializeJsonType of hoJson jsonTypeArray
        
        Get Create (RefClass(cJsonObject)) to hoCustomer
        
        Send Find of oCustomer_DD FIRST_RECORD 1
        While (Found)
            Send InitializeJsonType of hoCustomer jsonTypeObject
            
            Send SetMemberValue of hoCustomer "Number" jsonTypeInteger Customer.Customer_Number
            Send SetMemberValue of hoCustomer "Name" jsonTypeString (Trim(Customer.Name))
            Send SetMemberValue of hoCustomer "City" jsonTypeString (Trim(Customer.City))
            
            Send AddMember of hoJson hoCustomer
            
            Send Find of oCustomer_DD NEXT_RECORD 1
        Loop
        
        Send OutputJson hoJson
        
        Send Destroy of hoCustomer
        Send Destroy of hoJson
    End_Procedure
    
    Procedure OnHttpPost String sPath String sContentType String sAcceptType Integer iSize
        String[] aPath
        
        //  Split the path into parts
        Get StrSplitToArray sPath "/" to aPath
        If (SizeOfArray(aPath) < 2) Begin
            Send SetResponseStatus 404 "Invalid resource" 
            Procedure_Return
        End
        
        //  Redirect to a specific operation based on the path
        If (Lowercase(aPath[1]) = "customers") Begin
            If (SizeOfArray(aPath) > 2 and aPath[2] <> "") Begin
                Send SetResponseStatus 400 "Only use POST for creating new resources"
            End
            Else Begin
                Send SaveCustomer True ""
            End
        End
        Else Begin
            Send SetResponseStatus 404 "Unknown resource"
        End
    End_Procedure
    
    Procedure OnHttpPatch String sPath String sContentType Integer iSize
        String[] aPath
        
        //  Split the path into parts
        Get StrSplitToArray sPath "/" to aPath
        If (SizeOfArray(aPath) < 2) Begin
            Send SetResponseStatus 404 "Invalid resource" 
            Procedure_Return
        End
        
        //  Redirect to a specific operation based on the path
        If (Lowercase(aPath[1]) = "customers") Begin
            If (SizeOfArray(aPath) > 2 and aPath[2] <> "") Begin
                Send SaveCustomer False aPath[2]
            End
            Else Begin                
                Send SetResponseStatus 400 "Only use PATCH for updating existing  resources"
            End
        End
        Else Begin
            Send SetResponseStatus 404 "Unknown resource"
        End
    End_Procedure
    
    //  Saves an existing customer based on the data posted
    Procedure SaveCustomer Boolean bCreate String sKey
        Handle hoJson
        Boolean bSuccess
        String sVal
        Boolean bVal bErr
        
        //  Find the right record
        If (bCreate) Begin
            Send Clear of oCustomer_DD
        End
        Else Begin
            Send Clear of oCustomer_DD
            Move sKey to Customer.Customer_Number
            Send Find of oCustomer_DD EQ 1
            
            If (not(Found)) Begin
                Send SetResponseStatus 404 "Resource not found"
                Procedure_Return
            End
        End
        
        //  Read the request data
        Get RequestDataJson (&hoJson) to bSuccess
        
        If (bSuccess) Begin
            Send ErrorQueueStart
            
            //  Set the values
            If (HasMember(hoJson, "Name")) Begin
                Get MemberValue of hoJson "Name" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.Name)) to sVal
            End
            
            If (HasMember(hoJson, "Address")) Begin
                Get MemberValue of hoJson "Address" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.Address)) to sVal
            End
            
            If (HasMember(hoJson, "City")) Begin
                Get MemberValue of hoJson "City" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.City)) to sVal
            End
            
            If (HasMember(hoJson, "State")) Begin
                Get MemberValue of hoJson "State" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.State)) to sVal
            End
            
            If (HasMember(hoJson, "Zip")) Begin
                Get MemberValue of hoJson "Zip" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.Zip)) to sVal
            End
            
            If (HasMember(hoJson, "Phone")) Begin
                Get MemberValue of hoJson "Phone" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.Phone_Number)) to sVal
            End
            
            If (HasMember(hoJson, "Email")) Begin
                Get MemberValue of hoJson "Email" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.EMail_Address)) to sVal
            End
            
            If (HasMember(hoJson, "CreditLimit")) Begin
                Get MemberValue of hoJson "CreditLimit" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.Credit_Limit)) to sVal
            End
            
            If (HasMember(hoJson, "Purchases")) Begin
                Get MemberValue of hoJson "Purchases" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.Purchases)) to sVal
            End
            
            If (HasMember(hoJson, "Balance")) Begin
                Get MemberValue of hoJson "Balance" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.Balance)) to sVal
            End
            
            If (HasMember(hoJson, "Comments")) Begin
                Get MemberValue of hoJson "Comments" to sVal
                Set Field_Changed_Value of oCustomer_DD (RefTable(Customer.Comments)) to sVal
            End
            
            //  Perform the save
            If (ErrorCount(Self) = 0) Begin
                Get Request_Validate of oCustomer_DD to bErr
                If (not(bErr)) Begin
                   Send Request_Save of oCustomer_DD     
                   
                   If (not(Err)) Begin
                        Send Customer Customer.Customer_Number
                   End
                End
            End            
            
            Send ErrorQueueEnd
            Send ErrorReportJson
        End
        
        If (hoJson > 0) Begin
            Send Destroy of hoJson
        End
    End_Procedure
    
    Procedure OnHttpDelete String sPath
        String[] aPath
        
        Get StrSplitToArray sPath "/" to aPath
        If (SizeOfArray(aPath) < 2) Begin
            Send SetResponseStatus 404 "Invalid resource" 
            Procedure_Return
        End
        
        If (Lowercase(aPath[1]) = "customers") Begin
            If (SizeOfArray(aPath) > 2 and aPath[2] <> "") Begin
                Send DeleteCustomer aPath[2]
            End
            Else Begin                
                Send SetResponseStatus 400 "Only use DELETE on existing resources"
            End
        End
        Else Begin
            Send SetResponseStatus 404 "Unknown resource"
        End
    End_Procedure
    
    //  Deletes a specific customer record
    Procedure DeleteCustomer String sKey
        Send Clear of oCustomer_DD
        Move sKey to Customer.Customer_Number
        Send Find of oCustomer_DD EQ 1
        
        If (not(Found)) Begin
            Send SetResponseStatus 404 "Resource not found"
            Procedure_Return
        End
        
        Send ErrorQueueStart
        
        Send Request_Delete of oCustomer_DD
        
        Send ErrorQueueEnd
        Send ErrorReportJson
    End_Procedure
    
    //  Helper function that generates a response based on a JSON object.
    Procedure OutputJson Handle hoJson
        UChar[] ucData
        
        Send AddHttpResponseHeader "Content-Type" "application/json"
        Get StringifyUtf8 of hoJson to ucData
        Send OutputUChar ucData
    End_Procedure
    
    //  Helper function that reads an entire request into a JSON object.
    Function RequestDataJson Handle ByRef hoJson Returns Boolean
        UChar[] ucData
        Boolean bSuccess
        String sErr
        
        Get Create (RefClass(cJsonObject)) to hoJson
        
        Get RequestDataUChar -1 to ucData
        Get ParseUtf8 of hoJson ucData to bSuccess
        
        If (not(bSuccess)) Begin
            Get psParseError of hoJson to sErr
            Send SetResponseStatus 400 sErr
        End
        
        Function_Return bSuccess
    End_Function
    
    //  Helper function that reports all errors on the error queue in JSON format.
    Procedure ErrorReportJson
        Integer iErr iErrC
        Handle hoJson hoErrors   
        String sMessage
        
        Get ErrorCount to iErrC
        If (iErrC > 0) Begin
            Send SetResponseStatus 400 "Errors occurred"
            
            Get Create (RefClass(cJsonObject)) to hoJson
            Send InitializeJsonType of hoJson jsonTypeObject
            
            Get Create (RefClass(cJsonObject)) to hoErrors
            Send InitializeJsonType of hoErrors jsonTypeArray
            
            For iErr from 0 to (iErrC - 1)
                Get ErrorMessage iErr to sMessage
                Send AddMemberValue of hoErrors jsonTypeString  sMessage
            Loop
            
            Send SetMember of hoJson "aErrors" hoErrors
            
            Send OutputJson hoJson
            
            Send Destroy of hoErrors
            Send Destroy of hoJson
        End
    End_Procedure
End_Object


